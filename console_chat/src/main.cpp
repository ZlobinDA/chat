/*
Задание
Создайте чат со следующим функционалом:
- консольная программа;
- регистрация пользователей - логин, пароль, имя;
- вход в чат по логину/паролю;
- отправка сообщений конкретному пользователю;
- обмен сообщениями между всеми пользователями чата одновременно.

Обязательным условием является использование классов.
Дополнительно можно реализовать обработку исключений и использование шаблонов.

*/

/*
	README.md

	=========================
	Список участников команды
	=========================
		1. Денис Злобин
		2.

	===============================
	Описание выбранной идеи решения
	===============================

	После запуска приложения выводится стартовое меню:
		1. Я новый пользователь. Хочу зарегистрироваться
		2. Я зарегистрированный пользователь. Войти в чат
		3. Завершить работу приложения
	Для того, чтобы у пользователя появилась возможность написать сообщение в чат, он должен зарегистрироваться (п. 1 меню)
	 и далее войти в чат (п. 2 меню). Имена пользователей могут совпадать, логины должны быть уникальными.
	Одновременно пользоваться чатом (писать сообщения) может один пользователь.
	Для смены пользователя необходимо использовать п.2 и войти в чат другим пользователем. При этом выходить из чата (разлогиниваться)
	 предыдущем пользователем не нужно.
	Писать сообщение можно либо в общий чат, либо конкретному пользователя. Каждое сообщение содержит имя пользователя,
	который его написал.
	Общий чат (см ниже, п. 4 меню) становится доступен при регистрации минимум 1 пользователя:
		1. Я новый пользователь. Хочу зарегистрироваться
		2. Я зарегистрированный пользователь. Войти в чат
		3. Завершить работу приложения
		4. Написать сообщение в общий чат
	Отправка личных сообщений становится доступна при регистрации минимум 2-х пользователей. Имя пользователя для отправки
	 личного сообщения выбирается с помощью активации соответствующего пункта меню:
		1. Я новый пользователь. Хочу зарегистрироваться
		2. Я зарегистрированный пользователь. Войти в чат
		3. Завершить работу приложения
		4. Написать сообщение в общий чат
		5. Написать сообщение пользователю <...>
	Пользователь не может отправлять личные сообщения сам себе.
	При попытке завершить работу приложения запрашивается пароль администратора. Пароль администратора сохранен в коде программы.

	===================================================
	Описание пользовательских типов и функций в проекте
	===================================================


	=============================
	Распределение задач в команде
	=============================
	1. Д. Злобин реализовывал пользовательский интерфейс и механику работы чата.

*/

#include "ChatUser.h"
#include <iostream>
#include <limits>
#include <vector>
#include <string>
using namespace std;

auto main()->int {

	// Задаем в консоле кодировку cp1251 для корректного отображения русских букв.
	system("chcp 1251");

	cout << endl;
	cout << "Добро пожаловать в локальный консольный чат!" << endl;

	// Максимальное число пользователей в базе данных. Если больше, отказ от регистрации.
	// Число может быть любым, для реализации возможности достижения границы задано маленькое число.
	constexpr int maxUsers = 3;

	// Пароль администратора
	constexpr int rootPassword = 123;

	// Расшифровка индексов массива userData - база данных пользователей.
	static vector <ChatUser> userData;

	// Признак наличия пользователя в чате.
	static bool userOnline = false;

	// Работа чата организована в виде бесконечного цикла.
	static string currentUserLogin = ""; // логин текущего активного пользователя в чате
	for (;;) {
		cout << endl;
		cout << "Выберите действие:" << endl;
		cout << "\t 1. Я новый пользователь. Хочу зарегистрироваться" << endl;
		cout << "\t 2. Я зарегистрированный пользователь. Войти в чат" << endl;
		cout << "\t 3. Завершить работу приложения" << endl;
		// Возможность писать сообщение в чат появляется при наличии 1-ого зарегистрированного пользователя в чате.
		if (userOnline) {
			cout << "\t 4. Написать сообщение в общий чат" << endl;
		}

		// Возможность написать личное сообщение доступна при наличии более 2-х зарегистрированных пользователей в чате.
		if (userOnline && userData.size() > 1) {
			cout << "\t 5. Написать личное сообщение пользователю" << endl;
		}
		// Выводим список пользователей, зарегистрированных в чате.
		if (userData.size() > 0) {
			string Users = "Пользователи, зарегистрированные в чате:";
			int registredUsersNumber = userData.size();
			for (auto i = 0; i < registredUsersNumber; ++i) {
				Users = Users + " " + userData[i].getNickname();
			}
			cout << Users << endl;
		}
		else {
			cout << "В чате еще никто не зарегистрировался" << endl;
		}

		string consoleInput = "";
		// @todo Обработка исключений, связанных с вводом: вместо цифры с 1-4 вводится слово.
		getline(cin, consoleInput);
		switch (stoi(consoleInput)) {
		case 1:
		{
			// Порядковый номер регистрируемого пользователя.
			// Использую отдельную переменную, что не путаться с userOnline
			static int number = -1;
			++number;
			if (number > maxUsers - 1) {
				--number;
				cout << "Вы не можете зарегистрироваться! Пользовательская база данных переполнена" << endl;
				break;
			}

			cout << "При вводе личной информации используйте буквы английского алфавита и цифры. " <<
				"Буквы русского алфавита и дополнительные символы запрещены!" << endl;
			cout << "Введите свое имя:" << endl;
			// @todo Обработка исключений, связанных с вводом.
			string name;
			getline(cin, name);

			cout << "Придумайте логин:" << endl;
			// @todo Обработка исключений, связанных с вводом.
			string login;
			getline(cin, login);
			// @todo Логин должен быть уникальным. Если логин уже существует, повторный запрос логина.

			cout << "Введите свой пароль:" << endl;
			// @todo Обработка исключений, связанных с вводом.
			string password;
			getline(cin, password);

			// Создаем нового пользователя. Данные вводятся в формате: логин - полное имя - пароль.
			ChatUser newUser(login, name, password);

			// Добавляем нового пользователя в базу данных. Подсчет числа пользователя производится через метод size.
			userData.push_back(newUser);

			break;
		}
		case 2:
		{
			if (userData.size() < 1) {
				cout << "В чате еще нет зарегистрированных пользователей!" << endl;
			}

			cout << "Введите свой логин:" << endl;
			// @todo Обработка исключений, связанных с вводом.
			string login;
			getline(cin, login);
			// Проверка наличия данного логина в базе.
			bool isUser = false;
			int number = -1; // номер пользователя в базе, используется при проверки пароля
			int registredUsersNumber = userData.size();
			for (auto i = 0; i < registredUsersNumber; ++i) {
				if (login == userData[i].getNickname()) {
					isUser = true;
					number = i;
					break;
				}
			}

			// Проверили всю базу и не нашли пользователя в базе.
			if (!isUser) {
				cout << "Пользователь с данным логином не зарегистрирован!" << endl;
				break;
			}

			cout << "Введите свой пароль:" << endl;
			// @todo Обработка исключений, связанных с вводом.
			string password;
			getline(cin, password);
			// Проверка соответствия пароля в базе и введенного пароля.
			if (password == userData[number].getPassword()) {
				cout << "Добро пожаловать, " << userData[number].getFullname() << "!" << endl;
				currentUserLogin = userData[number].getNickname();
				userOnline = true;
			}
			else {
				cout << "Пароль введен не верно!" << endl;
			}
			break;
		}
		case 3:
		{
			cout << "Введите пароль администратора:" << endl;
			string password;
			getline(cin, password);
			if (stoi(password) == rootPassword) {
				cout << "Работа чата завершена" << endl;
				return 0;
			}
			else {
				cout << "Неправильный пароль!" << endl;
				break;
			}
		}
		case 4:
		{
			cout << "Наберите текст сообщения. Для отправки нажмите клавишу Enter" << endl;
			string message = "";
			// @todo Обработка исключений, связанных с вводом.
			getline(cin, message);
			cout << "[" << currentUserLogin << "]: " << message << endl;
		}
		break;
		case 5:
		{
			cout << "Выберите пользователя, которому хотите написать личное сообщение" << endl;
			int registredUsersNumber = userData.size();
			for (auto i = 0; i < registredUsersNumber; ++i) {
				// Пользователь не может отправлять личные сообщения себе
				if (userData[i].getNickname() != currentUserLogin) {
					cout << "\t " << (i + 1) << ". Написать сообщение пользователю " << userData[i].getNickname() << endl;
				}
			}
			string number = "";
			getline(cin, number);
			// Ищем введенный (номер - 1) среди пользователей.
			for (auto i{ 0 }; i < registredUsersNumber; ++i) {
				if ((stoi(number) - 1) == i) {
					cout << "Наберите текст сообщения для пользователя " << userData[i].getNickname() << ". Для отправки нажмите клавишу Enter" << endl;
					string message = "";
					// @todo Обработка исключений, связанных с вводом.
					getline(cin, message);
					cout << "[" << userData[i].getNickname() << "] у вас личное сообщение от пользователя " << 
						"[" << currentUserLogin << "]: " << message << endl;
				}
			}
			break;
		}
		default:
			break;
		}

	}

	return 0;
}